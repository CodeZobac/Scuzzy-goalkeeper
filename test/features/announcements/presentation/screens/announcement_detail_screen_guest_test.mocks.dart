// Mocks generated by Mockito 5.4.6 from annotations
// in goalkeeper/test/features/announcements/presentation/screens/announcement_detail_screen_guest_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:goalkeeper/src/features/announcements/data/models/announcement.dart'
    as _i2;
import 'package:goalkeeper/src/features/announcements/presentation/controllers/announcement_controller.dart'
    as _i4;
import 'package:goalkeeper/src/features/auth/data/models/registration_prompt_config.dart'
    as _i3;
import 'package:goalkeeper/src/features/auth/presentation/providers/auth_state_provider.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnnouncement_0 extends _i1.SmartFake implements _i2.Announcement {
  _FakeAnnouncement_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegistrationPromptConfig_1 extends _i1.SmartFake
    implements _i3.RegistrationPromptConfig {
  _FakeRegistrationPromptConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnnouncementController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnnouncementController extends _i1.Mock
    implements _i4.AnnouncementController {
  MockAnnouncementController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Announcement> get announcements => (super.noSuchMethod(
        Invocation.getter(#announcements),
        returnValue: <_i2.Announcement>[],
      ) as List<_i2.Announcement>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isCreatingAnnouncement => (super.noSuchMethod(
        Invocation.getter(#isCreatingAnnouncement),
        returnValue: false,
      ) as bool);

  @override
  bool get isRefreshing => (super.noSuchMethod(
        Invocation.getter(#isRefreshing),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isJoinLeaveLoading(int? announcementId) => (super.noSuchMethod(
        Invocation.method(
          #isJoinLeaveLoading,
          [announcementId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isUserParticipant(int? announcementId) => (super.noSuchMethod(
        Invocation.method(
          #isUserParticipant,
          [announcementId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAnnouncementLoading(int? announcementId) => (super.noSuchMethod(
        Invocation.method(
          #isAnnouncementLoading,
          [announcementId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchAnnouncements() => (super.noSuchMethod(
        Invocation.method(
          #fetchAnnouncements,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> createAnnouncement(_i2.Announcement? announcement) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAnnouncement,
          [announcement],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> refreshAnnouncements() => (super.noSuchMethod(
        Invocation.method(
          #refreshAnnouncements,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> retry() => (super.noSuchMethod(
        Invocation.method(
          #retry,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> checkUserParticipation(
    int? announcementId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUserParticipation,
          [
            announcementId,
            userId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> joinAnnouncement(
    int? announcementId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinAnnouncement,
          [
            announcementId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> leaveAnnouncement(
    int? announcementId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveAnnouncement,
          [
            announcementId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Announcement> getAnnouncementById(int? announcementId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnnouncementById,
          [announcementId],
        ),
        returnValue: _i5.Future<_i2.Announcement>.value(_FakeAnnouncement_0(
          this,
          Invocation.method(
            #getAnnouncementById,
            [announcementId],
          ),
        )),
      ) as _i5.Future<_i2.Announcement>);

  @override
  _i5.Future<List<String>> getAnnouncementParticipants(int? announcementId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnnouncementParticipants,
          [announcementId],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i2.AnnouncementParticipant>> getParticipants(
          int? announcementId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getParticipants,
          [announcementId],
        ),
        returnValue: _i5.Future<List<_i2.AnnouncementParticipant>>.value(
            <_i2.AnnouncementParticipant>[]),
      ) as _i5.Future<List<_i2.AnnouncementParticipant>>);

  @override
  void clearParticipationCache() => super.noSuchMethod(
        Invocation.method(
          #clearParticipationCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthStateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStateProvider extends _i1.Mock implements _i7.AuthStateProvider {
  MockAuthStateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isGuest => (super.noSuchMethod(
        Invocation.getter(#isGuest),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get hasIntendedDestination => (super.noSuchMethod(
        Invocation.getter(#hasIntendedDestination),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void initializeGuestContext() => super.noSuchMethod(
        Invocation.method(
          #initializeGuestContext,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearGuestContext() => super.noSuchMethod(
        Invocation.method(
          #clearGuestContext,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackGuestContentView(String? content) => super.noSuchMethod(
        Invocation.method(
          #trackGuestContentView,
          [content],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> promptForRegistration(String? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #promptForRegistration,
          [context],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool shouldShowRegistrationPrompt([String? context]) => (super.noSuchMethod(
        Invocation.method(
          #shouldShowRegistrationPrompt,
          [context],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool requiresAuthentication(String? feature) => (super.noSuchMethod(
        Invocation.method(
          #requiresAuthentication,
          [feature],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isRouteAccessibleToGuests(String? route) => (super.noSuchMethod(
        Invocation.method(
          #isRouteAccessibleToGuests,
          [route],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setIntendedDestination(
    String? destination, [
    dynamic arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setIntendedDestination,
          [
            destination,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordPromptResponse(
    String? context,
    bool? accepted,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #recordPromptResponse,
          [
            context,
            accepted,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackGuestRegistration(String? registrationSource) => super.noSuchMethod(
        Invocation.method(
          #trackGuestRegistration,
          [registrationSource],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.RegistrationPromptConfig getOptimalPromptConfig(String? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOptimalPromptConfig,
          [context],
        ),
        returnValue: _FakeRegistrationPromptConfig_1(
          this,
          Invocation.method(
            #getOptimalPromptConfig,
            [context],
          ),
        ),
      ) as _i3.RegistrationPromptConfig);

  @override
  Map<String, dynamic> getGuestAnalyticsSummary() => (super.noSuchMethod(
        Invocation.method(
          #getGuestAnalyticsSummary,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, double> getPromptEffectivenessMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getPromptEffectivenessMetrics,
          [],
        ),
        returnValue: <String, double>{},
      ) as Map<String, double>);

  @override
  Map<String, int> getContentEngagementMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getContentEngagementMetrics,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  Map<String, dynamic> getPromptStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getPromptStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
