import 'package:flutter/material.dart';
import '../data/models/contract_notification_data.dart';
import '../data/models/full_lobby_notification_data.dart';
import 'notification_service_manager.dart';

/// Example usage of the enhanced push notification system
/// This demonstrates how to integrate contract and full lobby notifications
class EnhancedPushNotificationExample {
  final NotificationServiceManager _serviceManager = NotificationServiceManager.instance;

  /// Example: Send a contract request notification
  Future<void> sendContractRequestExample() async {
    try {
      // Create contract notification data
      final contractData = ContractNotificationData(
        contractId: '', // Will be generated by the repository
        contractorId: 'contractor_user_id_123',
        contractorName: 'João Silva',
        contractorAvatarUrl: 'https://example.com/avatar.jpg',
        announcementId: 'announcement_456',
        announcementTitle: 'Jogo de Futebol - Estádio Central',
        gameDateTime: DateTime.now().add(const Duration(days: 2)),
        stadium: 'Estádio Central',
        offeredAmount: 150.0,
        additionalNotes: 'Jogo importante, preciso de um goleiro experiente',
      );

      // Send notification (database + push)
      await _serviceManager.sendContractNotification(
        goalkeeperUserId: 'goalkeeper_user_id_789',
        contractorUserId: 'contractor_user_id_123',
        announcementId: 'announcement_456',
        contractData: contractData,
      );

      debugPrint('Contract request notification sent successfully');
    } catch (e) {
      debugPrint('Error sending contract request: $e');
    }
  }

  /// Example: Send a full lobby notification
  Future<void> sendFullLobbyNotificationExample() async {
    try {
      // Create full lobby notification data
      final lobbyData = FullLobbyNotificationData(
        announcementId: 'announcement_456',
        announcementTitle: 'Jogo de Futebol - Estádio Central',
        gameDateTime: DateTime.now().add(const Duration(days: 2)),
        stadium: 'Estádio Central',
        participantCount: 22,
        maxParticipants: 22,
      );

      // Send notification (database + push)
      await _serviceManager.sendFullLobbyNotification(
        creatorUserId: 'creator_user_id_123',
        announcementId: 'announcement_456',
        lobbyData: lobbyData,
      );

      debugPrint('Full lobby notification sent successfully');
    } catch (e) {
      debugPrint('Error sending full lobby notification: $e');
    }
  }

  /// Example: Handle notification tap in your app
  void setupNotificationTapHandling(BuildContext context) {
    final notificationService = _serviceManager.notificationService;
    
    // Set up notification tap callback
    notificationService.onNotificationTapped = (data) {
      debugPrint('Notification tapped with data: $data');
      
      // Parse the notification data
      final parsedData = notificationService.parseNotificationData(data);
      if (parsedData != null) {
        _handleNotificationNavigation(context, parsedData);
      }
    };

    // Set up notification received callback (for foreground notifications)
    notificationService.onNotificationReceived = (data) {
      debugPrint('Notification received in foreground: $data');
      
      // You could show a snackbar or update UI here
      _showNotificationSnackbar(context, data);
    };
  }

  /// Handle navigation based on notification type
  void _handleNotificationNavigation(BuildContext context, Map<String, dynamic> data) {
    final notificationType = data['type'] as String?;
    
    switch (notificationType) {
      case 'contract_request':
        _navigateToContractDetails(context, data);
        break;
      case 'full_lobby':
        _navigateToAnnouncementDetails(context, data);
        break;
      default:
        _navigateToNotifications(context);
    }
  }

  /// Navigate to contract details
  void _navigateToContractDetails(BuildContext context, Map<String, dynamic> data) {
    // Extract contract information
    final contractorName = data['contractor_name'] as String?;
    final announcementTitle = data['announcement_title'] as String?;
    final offeredAmount = data['offered_amount'] as double?;
    
    debugPrint('Navigating to contract details:');
    debugPrint('Contractor: $contractorName');
    debugPrint('Game: $announcementTitle');
    debugPrint('Amount: \$${offeredAmount?.toStringAsFixed(2)}');
    
    // Navigate to notifications screen for now
    // In the future, this could navigate to a dedicated contract screen
    Navigator.of(context).pushNamed('/notifications');
  }

  /// Navigate to announcement details
  void _navigateToAnnouncementDetails(BuildContext context, Map<String, dynamic> data) {
    final announcementId = data['announcement_id'] as String?;
    final announcementTitle = data['announcement_title'] as String?;
    final participantCount = data['participant_count'] as int?;
    final maxParticipants = data['max_participants'] as int?;
    
    debugPrint('Navigating to announcement details:');
    debugPrint('ID: $announcementId');
    debugPrint('Title: $announcementTitle');
    debugPrint('Participants: $participantCount/$maxParticipants');
    
    // Navigate to announcement detail screen
    // You would need to fetch the full announcement object first
    Navigator.of(context).pushNamed('/notifications');
  }

  /// Navigate to notifications screen
  void _navigateToNotifications(BuildContext context) {
    Navigator.of(context).pushNamed('/notifications');
  }

  /// Show notification snackbar for foreground notifications
  void _showNotificationSnackbar(BuildContext context, Map<String, dynamic> data) {
    final notificationType = data['type'] as String?;
    String message = 'Nova notificação recebida';
    
    switch (notificationType) {
      case 'contract_request':
        final contractorName = data['contractor_name'] as String?;
        message = '$contractorName quer contratá-lo';
        break;
      case 'full_lobby':
        final announcementTitle = data['announcement_title'] as String?;
        message = 'Lobby completo: $announcementTitle';
        break;
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        action: SnackBarAction(
          label: 'Ver',
          onPressed: () {
            Navigator.of(context).pushNamed('/notifications');
          },
        ),
        duration: const Duration(seconds: 4),
      ),
    );
  }

  /// Example: Initialize the notification system in your app
  Future<void> initializeNotificationSystem() async {
    try {
      // Initialize the service manager
      await _serviceManager.initialize();
      
      debugPrint('Enhanced notification system initialized');
    } catch (e) {
      debugPrint('Error initializing notification system: $e');
    }
  }

  /// Example: Handle user sign in
  Future<void> handleUserSignIn(String userId) async {
    try {
      await _serviceManager.onUserSignIn(userId);
      debugPrint('Notification services set up for user: $userId');
    } catch (e) {
      debugPrint('Error setting up notifications for user: $e');
    }
  }

  /// Example: Handle user sign out
  Future<void> handleUserSignOut() async {
    try {
      await _serviceManager.onUserSignOut();
      debugPrint('Notification services cleaned up');
    } catch (e) {
      debugPrint('Error cleaning up notification services: $e');
    }
  }

  /// Example: Check notification permissions
  Future<bool> checkNotificationPermissions() async {
    try {
      final notificationService = _serviceManager.notificationService;
      final areEnabled = await notificationService.areNotificationsEnabled();
      
      debugPrint('Notifications enabled: $areEnabled');
      return areEnabled;
    } catch (e) {
      debugPrint('Error checking notification permissions: $e');
      return false;
    }
  }

  /// Example: Get FCM token for debugging
  String? getFCMToken() {
    try {
      final notificationService = _serviceManager.notificationService;
      final token = notificationService.fcmToken;
      
      debugPrint('Current FCM token: $token');
      return token;
    } catch (e) {
      debugPrint('Error getting FCM token: $e');
      return null;
    }
  }
}

/// Widget example showing how to integrate the enhanced notification system
class NotificationIntegrationWidget extends StatefulWidget {
  const NotificationIntegrationWidget({super.key});

  @override
  State<NotificationIntegrationWidget> createState() => _NotificationIntegrationWidgetState();
}

class _NotificationIntegrationWidgetState extends State<NotificationIntegrationWidget> {
  final EnhancedPushNotificationExample _example = EnhancedPushNotificationExample();
  bool _notificationsEnabled = false;
  String? _fcmToken;

  @override
  void initState() {
    super.initState();
    _initializeNotifications();
  }

  Future<void> _initializeNotifications() async {
    // Initialize the notification system
    await _example.initializeNotificationSystem();
    
    // Set up notification tap handling
    _example.setupNotificationTapHandling(context);
    
    // Check permissions
    final enabled = await _example.checkNotificationPermissions();
    final token = _example.getFCMToken();
    
    if (mounted) {
      setState(() {
        _notificationsEnabled = enabled;
        _fcmToken = token;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Enhanced Notifications'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Notification Status',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text('Enabled: $_notificationsEnabled'),
            Text('FCM Token: ${_fcmToken?.substring(0, 20) ?? 'None'}...'),
            const SizedBox(height: 24),
            
            Text(
              'Test Notifications',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),
            
            ElevatedButton(
              onPressed: _example.sendContractRequestExample,
              child: const Text('Send Contract Request'),
            ),
            const SizedBox(height: 8),
            
            ElevatedButton(
              onPressed: _example.sendFullLobbyNotificationExample,
              child: const Text('Send Full Lobby Notification'),
            ),
            const SizedBox(height: 24),
            
            Text(
              'Navigation',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),
            
            ElevatedButton(
              onPressed: () => Navigator.of(context).pushNamed('/notifications'),
              child: const Text('Go to Notifications'),
            ),
          ],
        ),
      ),
    );
  }
}